-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

--###################################
--########### VIMSCRIPT #############
--###################################

-- Включить мышь
vim.cmd("set mouse")

-----------------------------------------------------------------------------

-- Отключение совместимости с vi. Нужно для правильной работы некоторых опций
vim.cmd("set nocompatible")

-----------------------------------------------------------------------------

-- Игнорирование регистра при поиске
vim.cmd("set ignorecase")

-- Не игнорировать регистр, если в паттерне есть большие буквы
vim.cmd("set smartcase")

-- Подсвечивать найденый паттерн
vim.cmd("set hlsearch")

-- Интерактивный поиск
vim.cmd("set incsearch")

-----------------------------------------------------------------------------

-- Размеры табов - 2
vim.cmd("set tabstop=2")
vim.cmd("set softtabstop=2")
vim.cmd("set shiftwidth=2")

-- Прерваратить табы в пробелы
vim.cmd("set expandtab")

-- Умные табы
vim.cmd("set smarttab")

-- Копировать отступ на новой строке
vim.cmd("set autoindent")
vim.cmd("set smartindent")

-----------------------------------------------------------------------------

-- Показать нумерацию строк
vim.cmd("set number")

-- Показать относительную нумерацию строк
vim.cmd("set relativenumber")

-----------------------------------------------------------------------------

-- Использовать системный буфер обмена
vim.cmd("set clipboard=unnamedplus")

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

--###################################
--########### LAZY.NVIM #############
--###################################

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-----------------------------------------------------------------------------

local opts = {}
local plugins = {

  --catpuccin
  { "catppuccin/nvim", name = "catppuccin", priotity = 1000 }, 

  --nvim-telescope
  {
    'nvim-telescope/telescope.nvim', tag = '0.1.6',
    dependencies = { 'nvim-lua/plenary.nvim' }
  },

--telescope-todo
  {
    "folke/todo-comments.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    opts = {
      -- your configuration comes here
      -- or leave it empty to use the default settings
      -- refer to the configuration section below
    }
  },

  --nvim-treesitter
  { "nvim-treesitter/nvim-treesitter", build= ":TSUpdate" },

  --vim-airline
  { "vim-airline/vim-airline" },
  { "vim-airline/vim-airline-themes" },

  --nvim-tree
  { "nvim-tree/nvim-tree.lua" },

  --dashboard
  {
    'nvimdev/dashboard-nvim',
    event = 'VimEnter',
    config = function()
      require('dashboard').setup {
      theme = 'doom',
      config = {
        header = {
          "",
          "",
          " ███╗   ██╗ ███████╗ ██████╗  ██╗   ██╗ ██╗ ███╗   ███╗",
          " ████╗  ██║ ██╔════╝██╔═══██╗ ██║   ██║ ██║ ████╗ ████║",
          " ██╔██╗ ██║ █████╗  ██║   ██║ ██║   ██║ ██║ ██╔████╔██║",
          " ██║╚██╗██║ ██╔══╝  ██║   ██║ ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║",
          " ██║ ╚████║ ███████╗╚██████╔╝  ╚████╔╝  ██║ ██║ ╚═╝ ██║",
          " ╚═╝  ╚═══╝ ╚══════╝ ╚═════╝    ╚═══╝   ╚═╝ ╚═╝     ╚═╝",
          "",
          "",
        },
        center = {
            {
                icon = '󰈞 ',
                icon_hl = 'Title',
                desc = 'Find files',
                desc_hl = 'String',
                key = 'f',
                --keymap = 'f',
                key_hl = 'Number',
                action = ':Telescope find_files'
            }, 
            {
				        icon = '󰱾 ',
                icon_hl = 'Title',
                desc = 'Open recently',
                desc_hl = 'String',
                key = 'r',
                --keymap = 'r',
                key_hl = 'Number',
                action = ':Telescope oldfiles'
            }, 
            {
                icon = ' ',
                icon_hl = 'Title',
                desc = 'Find text',
                desc_hl = 'String',
                key = 'w',
                --keymap = 'w',
                key_hl = 'Number',
                action = ':Telescope live_grep'
            },
            {
                icon = ' ',
                icon_hl = 'Title',
                desc = 'Git Braches',
                desc_hl = 'String',
                key = 'b',
                --keymap = 'b',
                key_hl = 'Number',
                action = ':Telescope git_branches'
            }

        }
        }
      }
    end,
    dependencies = {{'nvim-tree/nvim-web-devicons'}},
  }
}

require("lazy").setup(plugins, opts)

-----------------------------------------------------------------------------

-- Catppuccin
require("catppuccin").setup()
vim.cmd.colorscheme "catppuccin"

-----------------------------------------------------------------------------

-- TelescopeTODO
require("todo-comments").setup{
  signs = true, -- show icons in the signs column
  sign_priority = 8, -- sign priority
  -- keywords recognized as todo comments
  keywords = {
    FIX = {
      icon = " ", -- icon used for the sign, and in search results
      color = "error", -- can be a hex color, or a named color (see below)
      alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
      -- signs = false, -- configure signs for some keywords individually
    },
    TODO = { icon = " ", color = "info" },
    HACK = { icon = "󰈸 ", color = "warning" },
    WARN = { icon = " ", color = "warning", alt = { "WARNING", "XXX" } },
    PERF = { icon = " ", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
    NOTE = { icon = "󰠮 ", color = "hint", alt = { "INFO" } },
  },
  merge_keywords = true, -- when true, custom keywords will be merged with the defaults
  -- highlighting of the line containing the todo comment
  -- * before: highlights before the keyword (typically comment characters)
  -- * keyword: highlights of the keyword
  -- * after: highlights after the keyword (todo text)
  highlight = {
    before = "", -- "fg" or "bg" or empty
    keyword = "wide", -- "fg", "bg", "wide" or empty. (wide is the same as bg, but will also highlight surrounding characters)
    after = "fg", -- "fg" or "bg" or empty
    pattern = [[.*<(KEYWORDS)\s*:]], -- pattern or table of patterns, used for highlightng (vim regex)
    comments_only = true, -- uses treesitter to match keywords in comments only
    max_line_len = 400, -- ignore lines longer than this
    exclude = {}, -- list of file types to exclude highlighting
  },
  -- list of named colors where we try to extract the guifg from the
  -- list of hilight groups or use the hex color if hl not found as a fallback
  colors = {
    error = { "LspDiagnosticsDefaultError", "ErrorMsg", "#DC2626" },
    warning = { "LspDiagnosticsDefaultWarning", "WarningMsg", "#FBBF24" },
    info = { "LspDiagnosticsDefaultInformation", "#2563EB" },
    hint = { "LspDiagnosticsDefaultHint", "#10B981" },
    default = { "Identifier", "#7C3AED" },
  },
  search = {
    command = "rg",
    args = {
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
    },
    -- regex that will be used to match keywords.
    -- don't replace the (KEYWORDS) placeholder
    pattern = [[\b(KEYWORDS):]], -- ripgrep regex
    -- pattern = [[\b(KEYWORDS)\b]], -- match without the extra colon. You'll likely get false positives
  },
}

-----------------------------------------------------------------------------

-- Treesitter
local config = require("nvim-treesitter.configs")
config.setup({
  ensure_installed = {"python", "lua", "javascript"},
  highlight = { enable = true },
  indent = { enable = true } })

-----------------------------------------------------------------------------

-- VimAirline
vim.g.airline_powerline_fonts = 1
vim.g.airline_theme = 'violet'
vim.cmd("AirlineRefresh")

-----------------------------------------------------------------------------

-- NvimTree
require("nvim-tree").setup()

-----------------------------------------------------------------------------

-- Dashboard

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

--###################################
--############ MAPPING ##############
--###################################

vim.g.mapleader = " "

-- Telescope
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<C-p>', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})

-- NvimTree
vim.keymap.set('n', '<leader>t', ':NvimTreeToggle<CR>')
vim.keymap.set('n', '<leader>tf', ':NvimTreeFocus<CR>')
vim.keymap.set('n', '<leader>t+', ':NvimTreeResize +5<CR>')
vim.keymap.set('n', '<leader>t-', ':NvimTreeResize -5<CR>')

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
